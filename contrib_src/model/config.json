{
  "id": "0002",
  "meta": {
    "name": "colab_totalsegmentator",
    "application_area": "Google CoLab",
    "task": "Segmentation",
    "task_extended": "Whole body segmentation",
    "data_type": "Image/CT scan",
    "framework": "Google CoLab and PyTorch",
    "colab_link": "https://github.com/modelhub-ai/colab_totalsegmentator/blob/main/totalseg_all_mwe.ipynb",
    "github_link": "https://github.com/wasserth/TotalSegmentator"
  },
  "publication": {
    "title": "TotalSegmentator: robust segmentation of 104 anatomical structures in CT images",
    "source": "https://doi.org/10.48550/arXiv.2208.05868",
    "year": 2022,
    "authors": "Wasserthal, J., Meyer, M., Breit, H.C., Cyriac, J., Yang, S. and Segeroth, M.",
    "abstract": "In this work we focus on automatic segmentation of multiple anatomical structures in (whole body) CT images. Many segmentation algorithms exist for this task. However, in most cases they suffer from 3 problems: 1. They are difficult to use (the code and data is not publicly available or difficult to use). 2. They do not generalize (often the training dataset was curated to only contain very clean images which do not reflect the image distribution found during clinical routine), 3. The algorithm can only segment one anatomical structure. For more structures several algorithms have to be used which increases the effort required to set up the system. In this work we publish a new dataset and segmentation toolkit which solves all three of these problems: In 1204 CT images we segmented 104 anatomical structures (27 organs, 59 bones, 10 muscles, 8 vessels) covering a majority of relevant classes for most use cases. We show an improved workflow for the creation of ground truth segmentations which speeds up the process by over 10x. The CT images were randomly sampled from clinical routine, thus representing a real world dataset which generalizes to clinical application. The dataset contains a wide range of different pathologies, scanners, sequences and sites. Finally, we train a segmentation algorithm on this new dataset. We call this algorithm TotalSegmentator and make it easily available as a pretrained python pip package (pip install totalsegmentator). Usage is as simple as TotalSegmentator -i ct.nii.gz -o seg and it works well for most CT images.",
    "url": "https://doi.org/10.48550/arXiv.2208.05868",
    "google_scholar": "https://scholar.google.com/scholar?cites=2693648639295449445&as_sdt=40000005&sciodt=0,22&hl=en",
    "bibtex": "@article{wasserthal2022totalsegmentator, title={TotalSegmentator: robust segmentation of 104 anatomical structures in CT images}, author={Wasserthal, Jakob and Meyer, Manfred and Breit, Hanns-Christian and Cyriac, Joshy and Yang, Shan and Segeroth, Martin}, journal={arXiv preprint arXiv:2208.05868}, year={2022}}"
  },
  "model": {
    "description": "This notebook provides a minimal working example of TotalSegmentator, a tool for the segmentation of 104 anatomical structures from CT images. The model was trained using a wide range of imaging CT data of different pathologies from several scanners, protocols and institutions. We test TotalSegmentator by implementing an end-to-end (cloud-based) pipeline on publicly available whole body CT scans hosted on the Imaging Data Commons (IDC), starting from raw DICOM CT data and ending with a DICOM SEG object storing the segmentation masks generated by the AI model. The testing dataset we use is external and independent from the data used in the development phase of the model (training and validation) and is composed by a wide variety of image types (from the area covered by the scan, to the presence of contrast and various types of artefacts). The way all the operations are executed - from pulling data, to data postprocessing, and the standardisation of the results - have the goal of promoting transparency and reproducibility.",
    "provenance": "",
    "architecture": "pyTorch, nnUnet",
    "learning_type": "",
    "format": "",
    "io": {
      "input": {
        "format": [],
        "single":{
          "format": [],
          "dim_limits": [
          {
            "min": 0,
            "max": 0
          },
          {
            "min": 0
          },
          {
            "min": 0
          }
        ],
         "description":""
        },
        "description": ""
      },
      "output": [
        {
          "name": "",
          "type": "",
          "description": ""
        }
      ]
    }
  },
  "modelhub": {}
}
